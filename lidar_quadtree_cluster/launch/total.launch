<launch>

  <node pkg="imu_vn100_yu" type="imu_driver_node" name="vn100_imu">
    <param name="port" value="/dev/vn100_imu"/>
    <param name="baudrate" value="115200"/>
  </node>

  <!-- velodyne 16 -->
  <arg name="pcap" default="" />
  <arg name="calibration" default="$(find velodyne_pointcloud)/params/VLP16db.yaml"/>
  <arg name="min_range" default="0.4" />
  <arg name="max_range" default="130.0" />
  <arg name="model" default="VLP16"/>
  <arg name="topic_name" default="points_raw"/>

  <!-- start nodelet manager and driver nodelets -->
  <include file="$(find velodyne_driver)/launch/nodelet_manager.launch">
    <arg name="model" value="$(arg model)"/>
    <arg name="pcap" value="$(arg pcap)"/>
  </include>


  <!-- start cloud nodelet -->
  <node pkg="nodelet" type="nodelet" name="cloud_nodelet"
        args="load velodyne_pointcloud/CloudNodelet velodyne_nodelet_manager">
    <param name="calibration" value="$(arg calibration)"/>
    <param name="min_range" value="$(arg min_range)"/>
    <param name="max_range" value="$(arg max_range)"/>
    <remap from="velodyne_points" to="$(arg topic_name)"/>
  </node>

  <!-- erp42 driver -->
  <node pkg="erp42_driver" type="erp42_main" name="erp42_main">
    <param name="port" value="/dev/erp42"/>
    <param name="frequency" value="20"/>
    <param name="wheelbase" value="1.14"/> <!--2020 1.12-->
    <param name="maximum_steering_angle" value="2000"/>
    <param name="minimum_turning_radius" value="2.6"/>
    <param name="initWriteThread" value="true"/>
    <param name="settling_time" value="1.7"/>
	  <param name="weight" value="1.1"/>  <!--2020 keep-->
	  <param name="shift" value="20.0"/>
	  <param name="steer_kp" value="1.0"/>
	  <param name="steer_ki" value="0.0"/>
	  <param name="steer_kd" value="0.0"/>
	  <param name="brake_max" value="200"/>
	  <param name="brake_kp" value="25"/>
	  <param name="brake_ki" value="0.0"/>
	  <param name="brake_kd" value="0.0"/>
	  <param name="accel_kp" value="1.0"/>  
	  <param name="accel_ki" value="0.5"/>
	  <param name="accel_kd" value="0.0"/>
    
	  <param name="C0" value="0.30"/> <!-- original value 0.108 -->
	  <param name="C1" value="0.005"/>
	  
    <param name="max_estop_time" value="20"/>

  </node>

  <node pkg="odom_imu_merger" type="odom_imu_merger" name="odom_imu_merger">
        <param name="odom_topic" value="vehicle/odom"/>
        <param name="imu_topic" value="imu"/>
        <param name="twist_topic" value="can_twist"/>
    </node>

  <arg name="show_debug_info" default="false"/>
  <arg name="enable_yaw_bias_estimation" default="True"/>
  <arg name="predict_frequency" default="50.0"/>
  <arg name="tf_rate" default="10.0"/>
  <arg name="extend_state_step" default="50"/>

  <!-- for Pose measurement -->
  <arg name="use_pose_with_covariance" default="false"/>
  <arg name="input_pose_name" default="ndt_pose"/>
  <arg name="input_pose_with_cov_name" default="in_pose_with_covariance"/>
  <arg name="pose_additional_delay" default="0.0"/>
  <arg name="pose_measure_uncertainty_time" default="0.01"/>
  <arg name="pose_rate" default="10.0"/>
  <arg name="pose_gate_dist" default="10000.0"/>
  <arg name="pose_stddev_x" default="0.05"/>
  <arg name="pose_stddev_y" default="0.05"/>
  <arg name="pose_stddev_yaw" default="0.025"/>

  <!-- for twist measurement -->
  <arg name="use_twist_with_covariance" default="false"/>
  <arg name="input_twist_name" default="can_twist"/>
  <arg name="input_twist_with_cov_name" default="in_twist_with_covariance"/>
  <arg name="twist_additional_delay" default="0.1"/>
  <arg name="twist_rate" default="10.0"/>
  <arg name="twist_gate_dist" default="10000.0"/>
  <arg name="twist_stddev_vx" default="0.2"/>
  <arg name="twist_stddev_wz" default="0.03"/>

  <!-- for process model -->
  <arg name="proc_stddev_yaw_c" default="0.005"/>
  <arg name="proc_stddev_yaw_bias_c" default="0.001"/>
  <arg name="proc_stddev_vx_c" default="0.2"/>
  <arg name="proc_stddev_wz_c" default="0.317321"/>


  <node pkg="ekf_localizer" type="ekf_localizer" name="ekf_localizer" output="screen">

    <remap unless="$(arg use_pose_with_covariance)" from="in_pose" to="$(arg input_pose_name)"/>
    <remap unless="$(arg use_pose_with_covariance)" from="in_pose_with_covariance" to="input_pose_with_cov_UNUSED"/>
    <remap if="$(arg use_pose_with_covariance)" from="in_pose" to="input_pose_UNUSED"/>
    <remap if="$(arg use_pose_with_covariance)" from="in_pose_with_covariance" to="$(arg input_pose_with_cov_name)"/>

    <remap unless="$(arg use_twist_with_covariance)" from="in_twist" to="$(arg input_twist_name)"/>
    <remap unless="$(arg use_twist_with_covariance)" from="in_twist_with_covariance" to="input_twist_with_covariance_UNUSED"/>
    <remap if="$(arg use_twist_with_covariance)" from="in_twist" to="input_twist_UNUSED"/>
    <remap if="$(arg use_twist_with_covariance)" from="in_twist_with_covariance" to="$(arg input_twist_with_cov_name)"/>

    <remap from="initialpose" to="/initialpose"/>

    <param name="pose_frame_id" value="/map"/>

    <param name="show_debug_info" value="$(arg show_debug_info)"/>
    <param name="enable_yaw_bias_estimation" value="$(arg enable_yaw_bias_estimation)"/>

    <param name="predict_frequency" value="$(arg predict_frequency)"/>
    <param name="tf_rate" value="$(arg tf_rate)"/>
    <param name="extend_state_step" value="$(arg extend_state_step)"/>

    <param name="use_pose_with_covariance" value="$(arg use_pose_with_covariance)"/>
    <param name="pose_additional_delay" value="$(arg pose_additional_delay)"/>
    <param name="pose_measure_uncertainty_time" value="$(arg pose_measure_uncertainty_time)"/>
    <param name="pose_rate" value="$(arg pose_rate)"/>
    <param name="pose_gate_dist" value="$(arg pose_gate_dist)"/>
    <param name="pose_stddev_x" value="$(arg pose_stddev_x)"/>
    <param name="pose_stddev_y" value="$(arg pose_stddev_y)"/>
    <param name="pose_stddev_yaw" value="$(arg pose_stddev_yaw)"/>

    <param name="use_twist_with_covariance" value="$(arg use_twist_with_covariance)"/>
    <param name="twist_additional_delay" value="$(arg twist_additional_delay)"/>
    <param name="twist_rate" value="$(arg twist_rate)"/>
    <param name="twist_gate_dist" value="$(arg twist_gate_dist)"/>
    <param name="twist_stddev_vx" value="$(arg twist_stddev_vx)"/>
    <param name="twist_stddev_wz" value="$(arg twist_stddev_wz)"/>

    <param name="proc_stddev_yaw_c" value="$(arg proc_stddev_yaw_c)"/>
    <param name="proc_stddev_yaw_bias_c" value="$(arg proc_stddev_yaw_bias_c)"/>
    <param name="proc_stddev_vx_c" value="$(arg proc_stddev_vx_c)"/>
    <param name="proc_stddev_wz_c" value="$(arg proc_stddev_wz_c)"/>

  </node>

  <node pkg="vehicle_status_sender" type="vehicle_status_sender" name="vehicle_status_sender"/>

  <!-- send table.xml to param server -->
  <arg name="topic_pose_stamped" default="/ekf_pose" />
  <arg name="topic_twist_stamped" default="/ekf_twist" />

  <node pkg="autoware_connector" type="can_status_translator" name="can_status_translator" output="log" />
  <node pkg="topic_tools" type="relay" name="pose_relay" output="log" args="$(arg topic_pose_stamped) /current_pose"/>
  <node pkg="topic_tools" type="relay" name="vel_relay" output="log" args="$(arg topic_twist_stamped) /current_velocity"/>

  <node name="map2velodyne" pkg="lidar_quadtree_cluster" type="map2velodyne" output="screen" ></node>
  
  <!-- input -->
  <arg name="points_raw_topic" default="/points_raw"/> <!-- road_remover -->
  <arg name="road_points_raw_topic" default="/unfiltered_points_raw"/>  <!-- road_remover -->
  <arg name="road_points_topic" default="/local_road_points"/> <!-- road_extractor -->
  <arg name="istrackdriving" default="true"/>
  
  <!-- output -->
  <arg name="publish_cloud_clusters_topic_name" default="/detection/lidar_detector/cloud_clusters"/> <!-- cloud_clusters -->
  <arg name="publish_object_topic_name" default="/detection/lidar_detector/objects"/> <!-- objects -->
  
  <arg name="height_from_ground_to_lidar" default="0.89"/>
  <arg name="z_high_limit" default="0.5" />
  <arg name="erase_road_threshold" default="0.2" />

  <arg name="my_car_width" default="0.6" />
  <arg name="my_car_height" default="1.1" />
  <arg name="max_cluster_size" default="5" />

  <node name="quadtree_segmentation" pkg="lidar_quadtree_cluster" type="quadtree_segmentation" output="screen">

    <param name="istrackdriving" value="$(arg istrackdriving)" />
    <param name="points_raw_topic" value="$(arg points_raw_topic)" />
    <param name="road_points_raw_topic" value="$(arg road_points_raw_topic)" />
    <param name="road_points_topic" value="$(arg road_points_topic)" />
    
    <param name="height_from_ground_to_lidar" value="$(arg height_from_ground_to_lidar)" />
    <param name="z_high_limit" value="$(arg z_high_limit)" />
    <param name="erase_road_threshold" value="$(arg erase_road_threshold)" />

    <param name="my_car_width" value="$(arg my_car_width)"/>
    <param name="my_car_height" value="$(arg my_car_height)"/>
    <param name="max_cluster_size" value="$(arg max_cluster_size)"/>

    <param name="publish_cloud_clusters_topic_name" value="$(arg publish_cloud_clusters_topic_name)"/>
    <param name="publish_object_topic_name" value="$(arg publish_object_topic_name)"/>

  </node>


  <!--track_driving-->

    <arg name="x_limit" default="5.0"/> 
    <arg name="y_limit" default="0.99999"/> 
    <arg name="neighbor_distance" default="5.0"/>
    
    <node name="track_driving" pkg="lidar_quadtree_cluster" type="track_driving" output="screen" >    
        <param name="x_limit" value="$(arg x_limit)" />
        <param name="y_limit" value="$(arg y_limit)" />
        <param name="neighbor_distance" value="$(arg neighbor_distance)" />
    </node>


  <!-- waypoint_follower -->

    <arg name="velocity" default="1.0"/>
    <node pkg="final_waypoint_follower" type="final_waypoint_follower" name="final_waypoint_follower" output="screen">
		  <param name="velocity" value="$(arg velocity)"/>
    </node>
</launch>